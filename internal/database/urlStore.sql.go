// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: urlStore.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addNewRecord = `-- name: AddNewRecord :one
INSERT INTO urlStore (uuid,longURL,shortURL)
VALUES ($1,$2,$3)
RETURNING uuid, longurl, shorturl
`

type AddNewRecordParams struct {
	Uuid     uuid.UUID
	Longurl  string
	Shorturl string
}

func (q *Queries) AddNewRecord(ctx context.Context, arg AddNewRecordParams) (Urlstore, error) {
	row := q.db.QueryRowContext(ctx, addNewRecord, arg.Uuid, arg.Longurl, arg.Shorturl)
	var i Urlstore
	err := row.Scan(&i.Uuid, &i.Longurl, &i.Shorturl)
	return i, err
}

const findExistingRecordUsingLongURL = `-- name: FindExistingRecordUsingLongURL :one
SELECT uuid, longurl, shorturl FROM urlStore
WHERE longURL=$1
`

func (q *Queries) FindExistingRecordUsingLongURL(ctx context.Context, longurl string) (Urlstore, error) {
	row := q.db.QueryRowContext(ctx, findExistingRecordUsingLongURL, longurl)
	var i Urlstore
	err := row.Scan(&i.Uuid, &i.Longurl, &i.Shorturl)
	return i, err
}

const findExistingRecordUsingShortURL = `-- name: FindExistingRecordUsingShortURL :one
SELECT uuid, longurl, shorturl FROM urlStore
WHERE shortURL=$1
`

func (q *Queries) FindExistingRecordUsingShortURL(ctx context.Context, shorturl string) (Urlstore, error) {
	row := q.db.QueryRowContext(ctx, findExistingRecordUsingShortURL, shorturl)
	var i Urlstore
	err := row.Scan(&i.Uuid, &i.Longurl, &i.Shorturl)
	return i, err
}
